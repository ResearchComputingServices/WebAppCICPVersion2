import os
import time

from scripts.Utils import *
from scripts.DataVizualizers.SilderQuestions import VisualizeSliderQuestion
from scripts.DataVizualizers.MultipleChoiceQuestions import VisualizeMultipleChoiceQuestion   
from scripts.DataVizualizers.OpenTextQuestions import VisualizeOpenTextQuestion                        
from scripts.DataVizualizers.MatrixQuestions import VisualizeMatrixQuestion
from scripts.DataVizualizers.RankOrderQuestions import VisualizeRankOrderQuestion                        
from scripts.DataVizualizers.TextGraphicQuestions import VisualizeTextGraphicQuestion


# This dictionary connects question type flags to the visualizer that creates the graphic for them
questionHandleDict ={   SLIDER_QUESTION : VisualizeSliderQuestion,
                        MULTIPLE_CHOICE_QUESTION : VisualizeMultipleChoiceQuestion,
                        OPEN_TEXT_QUESTION : VisualizeOpenTextQuestion,
                        MATRIX_QUESTION : VisualizeMatrixQuestion,
                        RANK_ORDER_QUESTION : VisualizeRankOrderQuestion,
                        TEXT_GRAPHIC_QUESTION : VisualizeTextGraphicQuestion}
                    
##################################################################################################################################
# This function returns a list of unique questions from the userResponse QuerySet generated by a frontend query
##################################################################################################################################
def GetListOfUniqueQuestions(userResponseQuerySet):
    questionList = []
    questionSeenList = []

    s1 = time.time()
    listOfResponses = list(userResponseQuerySet)
    e1 = time.time()
    print(e1 -s1)
    
    s2 = time.time()
    # loop over all the responses
    for response in listOfResponses:
       
        question = response.questionID
        
        # skip the question if we have already seen it
        if question.id in questionSeenList:
            continue
        else:
            questionSeenList.append(question.id)
        
        # handle matrix questions differently because they have subQuestions    
        if question.questionType == MATRIX_QUESTION:

            parentQuestion = QuestionTable.objects.filter(id=question.parentQuestionID.id).first()

            if parentQuestion not in questionList:
                questionList.append(parentQuestion) 
        else:            
            questionList.append(question)   
   
    e2 = time.time()
    print(e2 - s2)
   
    return questionList

# def GetListOfUniqueQuestions(userResponseQuerySet):
#     questionList = []
    
#     # Get all the unique questions in the set of responses
    
#     start1 = time.time()
#     questionIDs = userResponseQuerySet.order_by().values_list('questionID').distinct()
#     end1 = time.time()
#     print('Sort: ', end1 - start1)
   
#     # use the unique questionIDs to get a list of the questions
    
#     if questionIDs:
#         start1 = time.time()
#         for qID in questionIDs:
#             questionQuerySet = QuestionTable.objects.filter(id=qID[0])

#             if len(questionQuerySet) == 1:
#                 question = questionQuerySet.first()

#                 # handle matrix questions differently because they have subQuestions    
#                 if question.questionType == MATRIX_QUESTION:

#                     parentQuestion = QuestionTable.objects.filter(id=question.parentQuestionID.id).first()

#                     if parentQuestion not in questionList:
#                         questionList.append(parentQuestion) 
#                 else:            
#                     questionList.append(question)   
#             end2 = time.time()
#             print(end2 - start2)
   
#     end3 = time.time()
#     print('GetListOfUniqueQuestions: ', end3 - start1)
#     input()              
#     return questionList

##################################################################################################################################
# This function returns a list responses to the question passed as an arguement
##################################################################################################################################

def GetUserResponsesToQuestion(question, userResponseQuerySet):
    
    userResponseList = []
    
    if question.questionType == MATRIX_QUESTION:
        subQuestionsQuerySet = QuestionTable.objects.filter(parentQuestionID=question)
        
        for subQuestion in subQuestionsQuerySet:
            responsesToQuestion = userResponseQuerySet.filter(questionID=subQuestion.id)
    
            for response in responsesToQuestion:
                userResponseList.append(response)
    else:
        responsesToQuestion = userResponseQuerySet.filter(questionID=question.id)
    
        for response in responsesToQuestion:
            userResponseList.append(response)
        
    return userResponseList

##################################################################################################################################
# This function is the main entry point into the DataVisualizer. It will be called by the Controller to generate the images
# which it will then send to the Front End. It will return a list of file paths to the location of the generated files
##################################################################################################################################
def DataVisualizerMain(userResponseQuerySet,
                       isEnglish = True,
                       saveToDirPath = FIGURE_FOLDER_PATH):

    # make sure the tmp folder for storing the generated images exists
    isExist = os.path.exists(saveToDirPath)
    if not isExist:
        os.makedirs(saveToDirPath)
    
    start = time.time()
    questionList = GetListOfUniqueQuestions(userResponseQuerySet)
    end = time.time()
    print('GetListOfUniqueQuestions: ', end - start)
    
    imageFilePathList = []
    
    for question in questionList:
        print(question.questionType)
        
        start = time.time()
        if question.questionTheme in QUESTION_THEME_SKIP_LIST:
            continue
        
        userResponseList = GetUserResponsesToQuestion(question, userResponseQuerySet)
    
        if question.questionType not in questionHandleDict.keys():
            print('[ERROR]: Unknown question type: ', question.questionType)
        else:                        
            imageFilePath = questionHandleDict[question.questionType](  question = question,
                                                                        userResponses = userResponseList, 
                                                                        isEnglish= isEnglish,
                                                                        saveToDirPath = saveToDirPath) 
            imageFilePathList.append(imageFilePath)
        end = time.time()
        print(end - start)
    
    return imageFilePathList

##################################################################################################################################
# This function can be used for testing the data visualizers and the FrontEndQuery object
##################################################################################################################################

def run(*arg):
    
    # make sure the tmp folder for storing the generated images exists
    isExist = os.path.exists(FIGURE_FOLDER_PATH)
    if not isExist:
        os.makedirs(FIGURE_FOLDER_PATH)
    
    # create a front end query to get some data from the DB
    aQuery = FrontEndQuery()   
    aQuery.date = '2023-01-01'
    #aQuery.locations = 'AB'

    #userResponseQuerySet = GetUserResponseQuerySet(aQuery)
    #listOfFilePaths = DataVisualizerMain(userResponseQuerySet)
    
    # for fp in listOfFilePaths:
    #     print(fp)
    
    
        
  