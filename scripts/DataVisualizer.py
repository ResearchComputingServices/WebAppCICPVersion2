import os

from scripts.Utils import *
from scripts.Controller import HandleFrontEndQuery
from scripts.DataVizualizers.SilderQuestions import VisualizeSliderQuestion
from scripts.DataVizualizers.MultipleChoiceQuestions import VisualizeMultipleChoiceQuestion   
from scripts.DataVizualizers.OpenTextQuestions import VisualizeOpenTextQuestion                        
from scripts.DataVizualizers.MatrixQuestions import VisualizeMatrixQuestion
from scripts.DataVizualizers.RankOrderQuestions import VisualizeRankOrderQuestion                        
from scripts.DataVizualizers.TextGraphicQuestions import VisualizeTextGraphicQuestion
                        
##################################################################################################################################
# This function returns a list of unique questions from the userResponse QuerySet generated by a frontend query
##################################################################################################################################
def GetListOfUniqueQuestions(userResponseQuerySet):
    questionList = []
    
    # Get all the unique questions in the set of responses
    questionIDs = userResponseQuerySet.order_by().values_list('questionID').distinct()
    
    # use the unique questionIDs to get a list of the questions
    for qID in questionIDs:
        questionQuerySet = QuestionTable.objects.filter(id=qID[0])
        
        if len(questionQuerySet) == 1:
            question = questionQuerySet.first()

            # handle matrix questions differently because they have subQuestions    
            if question.questionType == MATRIX_QUESTION:
                parentQuestion = QuestionTable.objects.filter(id=question.parentQuestionID.id).first()
                if parentQuestion not in questionList:
                    questionList.append(parentQuestion) 
            else:            
                questionList.append(question)   
    
    return questionList

##################################################################################################################################
# This function returns a list responses to the question passed as an arguement
##################################################################################################################################
def GetUserResponsesToQuestion(question, userResponseQuerySet):
    
    userResponseList = []
    
    if question.questionType == MATRIX_QUESTION:
        subQuestionsQuerySet = QuestionTable.objects.filter(parentQuestionID=question)
        
        for subQuestion in subQuestionsQuerySet:
            responsesToQuestion = userResponseQuerySet.filter(questionID=subQuestion.id)
    
            for response in responsesToQuestion:
                userResponseList.append(response)
    else:
        responsesToQuestion = userResponseQuerySet.filter(questionID=question.id)
    
        for response in responsesToQuestion:
            userResponseList.append(response)
        
    return userResponseList

##################################################################################################################################
# This function can be used for testing the data visualizer
##################################################################################################################################
questionHandleDict ={   'Slider':VisualizeSliderQuestion,
                        'MC':VisualizeMultipleChoiceQuestion,
                        'TE':VisualizeOpenTextQuestion,
                        'Matrix':VisualizeMatrixQuestion,
                        'RO':VisualizeRankOrderQuestion,
                        'DB':VisualizeTextGraphicQuestion}

def run(*arg):
    
    # make sure the tmp folder for storing the generated images exists
    isExist = os.path.exists(FIGURE_FOLDER_PATH)
    if not isExist:
        os.makedirs(FIGURE_FOLDER_PATH)
    
    # create a front end query to get some data from the DB
    aQuery = FrontEndQuery()   
    aQuery.date = '2023-01-01'
    #aQuery.locations = 'AB'

    userResponseQuerySet = HandleFrontEndQuery(aQuery)
    
    questionList = GetListOfUniqueQuestions(userResponseQuerySet)
    
    for question in questionList:
        
        if question.questionTheme in QUESTION_THEME_SKIP_LIST:
            continue
        
        userResponseList = GetUserResponsesToQuestion(question, userResponseQuerySet)
    
        if question.questionType not in questionHandleDict.keys():
            print('[ERROR]: Unknown question type: ', question.questionType)
        else:             
            questionHandleDict[question.questionType](question,userResponseList)
        
  